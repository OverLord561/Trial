//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinFormsHosting.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrentUser", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceHosting")]
    [System.SerializableAttribute()]
    public partial class CurrentUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentUserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentUserPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WinFormsHosting.ServiceReference1.UserFile[] UserFileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentUserId {
            get {
                return this.CurrentUserIdField;
            }
            set {
                if ((this.CurrentUserIdField.Equals(value) != true)) {
                    this.CurrentUserIdField = value;
                    this.RaisePropertyChanged("CurrentUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentUserName {
            get {
                return this.CurrentUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentUserNameField, value) != true)) {
                    this.CurrentUserNameField = value;
                    this.RaisePropertyChanged("CurrentUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentUserPassword {
            get {
                return this.CurrentUserPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentUserPasswordField, value) != true)) {
                    this.CurrentUserPasswordField = value;
                    this.RaisePropertyChanged("CurrentUserPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WinFormsHosting.ServiceReference1.UserFile[] UserFile {
            get {
                return this.UserFileField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFileField, value) != true)) {
                    this.UserFileField = value;
                    this.RaisePropertyChanged("UserFile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserFile", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceHosting")]
    [System.SerializableAttribute()]
    public partial class UserFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WinFormsHosting.ServiceReference1.CurrentUser CurrentUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserFileDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserFilePathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WinFormsHosting.ServiceReference1.CurrentUser CurrentUser {
            get {
                return this.CurrentUserField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentUserField, value) != true)) {
                    this.CurrentUserField = value;
                    this.RaisePropertyChanged("CurrentUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentUserId {
            get {
                return this.CurrentUserIdField;
            }
            set {
                if ((this.CurrentUserIdField.Equals(value) != true)) {
                    this.CurrentUserIdField = value;
                    this.RaisePropertyChanged("CurrentUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFileDescription {
            get {
                return this.UserFileDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFileDescriptionField, value) != true)) {
                    this.UserFileDescriptionField = value;
                    this.RaisePropertyChanged("UserFileDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserFileId {
            get {
                return this.UserFileIdField;
            }
            set {
                if ((this.UserFileIdField.Equals(value) != true)) {
                    this.UserFileIdField = value;
                    this.RaisePropertyChanged("UserFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFileName {
            get {
                return this.UserFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFileNameField, value) != true)) {
                    this.UserFileNameField = value;
                    this.RaisePropertyChanged("UserFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFilePath {
            get {
                return this.UserFilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFilePathField, value) != true)) {
                    this.UserFilePathField = value;
                    this.RaisePropertyChanged("UserFilePath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserFilesDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceHosting")]
    [System.SerializableAttribute()]
    public partial class UserFilesDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterUser", ReplyAction="http://tempuri.org/IService1/RegisterUserResponse")]
        string RegisterUser(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterUser", ReplyAction="http://tempuri.org/IService1/RegisterUserResponse")]
        System.Threading.Tasks.Task<string> RegisterUserAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        WinFormsHosting.ServiceReference1.CurrentUser[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        System.Threading.Tasks.Task<WinFormsHosting.ServiceReference1.CurrentUser[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddFile", ReplyAction="http://tempuri.org/IService1/AddFileResponse")]
        bool AddFile(int userId, string name, string description, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddFile", ReplyAction="http://tempuri.org/IService1/AddFileResponse")]
        System.Threading.Tasks.Task<bool> AddFileAsync(int userId, string name, string description, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogIn", ReplyAction="http://tempuri.org/IService1/LogInResponse")]
        bool LogIn(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogIn", ReplyAction="http://tempuri.org/IService1/LogInResponse")]
        System.Threading.Tasks.Task<bool> LogInAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CopyFileToFolder", ReplyAction="http://tempuri.org/IService1/CopyFileToFolderResponse")]
        void CopyFileToFolder(string sourceFile, string fileName, string hostingPath, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CopyFileToFolder", ReplyAction="http://tempuri.org/IService1/CopyFileToFolderResponse")]
        System.Threading.Tasks.Task CopyFileToFolderAsync(string sourceFile, string fileName, string hostingPath, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserIdByName", ReplyAction="http://tempuri.org/IService1/GetUserIdByNameResponse")]
        int GetUserIdByName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserIdByName", ReplyAction="http://tempuri.org/IService1/GetUserIdByNameResponse")]
        System.Threading.Tasks.Task<int> GetUserIdByNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserFilesByUserId", ReplyAction="http://tempuri.org/IService1/GetUserFilesByUserIdResponse")]
        WinFormsHosting.ServiceReference1.UserFilesDTO[] GetUserFilesByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserFilesByUserId", ReplyAction="http://tempuri.org/IService1/GetUserFilesByUserIdResponse")]
        System.Threading.Tasks.Task<WinFormsHosting.ServiceReference1.UserFilesDTO[]> GetUserFilesByUserIdAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WinFormsHosting.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WinFormsHosting.ServiceReference1.IService1>, WinFormsHosting.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string RegisterUser(string name, string password) {
            return base.Channel.RegisterUser(name, password);
        }
        
        public System.Threading.Tasks.Task<string> RegisterUserAsync(string name, string password) {
            return base.Channel.RegisterUserAsync(name, password);
        }
        
        public WinFormsHosting.ServiceReference1.CurrentUser[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<WinFormsHosting.ServiceReference1.CurrentUser[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public bool AddFile(int userId, string name, string description, string path) {
            return base.Channel.AddFile(userId, name, description, path);
        }
        
        public System.Threading.Tasks.Task<bool> AddFileAsync(int userId, string name, string description, string path) {
            return base.Channel.AddFileAsync(userId, name, description, path);
        }
        
        public bool LogIn(string name, string password) {
            return base.Channel.LogIn(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> LogInAsync(string name, string password) {
            return base.Channel.LogInAsync(name, password);
        }
        
        public void CopyFileToFolder(string sourceFile, string fileName, string hostingPath, string userName) {
            base.Channel.CopyFileToFolder(sourceFile, fileName, hostingPath, userName);
        }
        
        public System.Threading.Tasks.Task CopyFileToFolderAsync(string sourceFile, string fileName, string hostingPath, string userName) {
            return base.Channel.CopyFileToFolderAsync(sourceFile, fileName, hostingPath, userName);
        }
        
        public int GetUserIdByName(string userName) {
            return base.Channel.GetUserIdByName(userName);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIdByNameAsync(string userName) {
            return base.Channel.GetUserIdByNameAsync(userName);
        }
        
        public WinFormsHosting.ServiceReference1.UserFilesDTO[] GetUserFilesByUserId(int userId) {
            return base.Channel.GetUserFilesByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<WinFormsHosting.ServiceReference1.UserFilesDTO[]> GetUserFilesByUserIdAsync(int userId) {
            return base.Channel.GetUserFilesByUserIdAsync(userId);
        }
    }
}
